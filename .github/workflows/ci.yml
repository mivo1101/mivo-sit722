# .github/workflows/ci.yml

name: CI - Test, Build, Push Images to ACR

on:
  push:
    branches:
      - testing
    paths:
      - 'backend/**'
      - 'frontend/**'
      - '.github/workflows/**'

concurrency:
  group: ci-${{ github.ref }}

permissions:
  contents: read
  id-token: write
  packages: write

jobs:
  test_backends:
    runs-on: ubuntu-latest
    
    services:
      product_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: products
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      order_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: orders
        ports:
          - 5433:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      customer_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: customers
        ports:
          - 5434:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          for req in backend/*/requirements.txt; do
            echo "Installing $req"
            pip install -r "$req"
          done
          pip install pytest httpx

      - name: Set PYTHONPATH
        run: echo "PYTHONPATH=$(pwd)/backend/order_service" >> $GITHUB_ENV

      - name: Run product_service tests
        working-directory: backend/product_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: products
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: pytest tests --maxfail=1 --disable-warnings -q

      - name: Run order_service tests
        working-directory: backend/order_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5433
          POSTGRES_DB: orders
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: pytest tests --maxfail=1 --disable-warnings -q

      - name: Run customer_service tests
        working-directory: backend/customer_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5434
          POSTGRES_DB: customers
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: pytest tests --maxfail=1 --disable-warnings -q

  build_and_push_images:
    runs-on: ubuntu-latest
    needs: test_backends
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set up QEMU and Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to ACR
        run: az acr login --name ${{ secrets.ACR_LOGIN_SERVER }}

      - name: Build Backend service images
        run: |
          docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/product_service:latest ./backend/product_service/
          docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/order_service:latest ./backend/order_service/
          docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/customer_service:latest ./backend/customer_service/

      - name: Push Backend service images to ACR
        run: |
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/product_service:latest
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/order_service:latest
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/customer_service:latest

      - name: Build & push frontend image
        run: |
          docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/frontend:latest ./frontend/
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/frontend:latest

      - name: Logout from Azure
        run: az logout
        if: always()

      # In the build_and_push_images job, add at the end:
      - name: Debug Workflow Conclusion
        run: |
          echo "Workflow Run ID: ${{ github.run_id }}"
          echo "Workflow Conclusion: ${{ github.event.workflow_run.conclusion || 'unknown' }}"