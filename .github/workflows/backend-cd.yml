name: Backend CD - Deploy to AKS

on:
  workflow_call:
    inputs:
      aks_cluster_name:
        required: true
        type: string
      aks_resource_group:
        required: true
        type: string
      aks_acr_name:
        required: true
        type: string
      image_tag:
        required: true
        type: string
    secrets:
      AZURE_CREDENTIALS:
        required: true

jobs:
  deploy_backends:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set AKS credentials
        run: az aks get-credentials --name ${{ inputs.aks_cluster_name }} --resource-group ${{ inputs.aks_resource_group }}

      - name: Build & push backend Docker images
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: |
            ${{ inputs.aks_acr_name }}.azurecr.io/product_service:${{ inputs.image_tag }}
            ${{ inputs.aks_acr_name }}.azurecr.io/order_service:${{ inputs.image_tag }}
            ${{ inputs.aks_acr_name }}.azurecr.io/customer_service:${{ inputs.image_tag }}
          build-args: |
            PYTHONUNBUFFERED=1
          context: ./backend
          file: ./backend/${{ matrix.service }}/Dockerfile
        strategy:
          matrix:
            service: [product_service, order_service, customer_service]

      - name: Set ACR pull secret
        run: |
          kubectl create secret docker-registry acr-auth \
            --docker-server=${{ inputs.aks_acr_name }}.azurecr.io \
            --docker-username=$(az acr credential show -n ${{ inputs.aks_acr_name }} --query username -o tsv) \
            --docker-password=$(az acr credential show -n ${{ inputs.aks_acr_name }} --query passwords[0].value -o tsv) \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy Postgres DBs
        run: kubectl apply -f k8s/postgres.yaml

      - name: Deploy backend services to AKS
        run: |
          for svc in product_service order_service customer_service; do
            kubectl apply -f k8s/${svc}-service.yaml
            kubectl set image deployment/${svc}-service ${svc}-service=${{ inputs.aks_acr_name }}.azurecr.io/${svc}:${{ inputs.image_tag }}
          done

  trigger_frontend:
    needs: deploy_backends
    uses: ./.github/workflows/frontend-cd.yml
    with:
      aks_cluster_name: ${{ inputs.aks_cluster_name }}
      aks_resource_group: ${{ inputs.aks_resource_group }}
      aks_acr_name: ${{ inputs.aks_acr_name }}
      image_tag: ${{ inputs.image_tag }}
    secrets:
      AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}