name: Backend CD - Deploy to AKS

on:
  workflow_call:
    inputs:
      aks_cluster_name:
        required: true
        type: string
      aks_resource_group:
        required: true
        type: string
      aks_acr_name:
        required: true
        type: string
      image_tag:
        required: true
        type: string
    secrets:
      AZURE_CREDENTIALS:
        required: true

jobs:
  deploy_backends:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set AKS credentials
        run: az aks get-credentials --name ${{ inputs.aks_cluster_name }} --resource-group ${{ inputs.aks_resource_group }}

      - name: Set ACR pull secret
        run: |
          kubectl create secret docker-registry acr-auth \
            --docker-server=${{ inputs.aks_acr_name }}.azurecr.io \
            --docker-username=$(az acr credential show -n ${{ inputs.aks_acr_name }} --query username -o tsv) \
            --docker-password=$(az acr credential show -n ${{ inputs.aks_acr_name }} --query passwords[0].value -o tsv) \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy Postgres DBs
        run: |
          kubectl apply -f k8s/postgres.yaml

      - name: Deploy backend services
        run: |
          for svc in product order customer; do
            kubectl apply -f k8s/${svc}-service.yaml
            kubectl set image deployment/${svc}-service ${svc}-service=${{ inputs.aks_acr_name }}.azurecr.io/${svc}_service:${{ inputs.image_tag }}
          done

      - name: Trigger frontend CD
        uses: ./.github/workflows/frontend-cd.yml
        with:
          aks_cluster_name: ${{ inputs.aks_cluster_name }}
          aks_resource_group: ${{ inputs.aks_resource_group }}
          aks_acr_name: ${{ inputs.aks_acr_name }}
          image_tag: ${{ inputs.image_tag }}
        secrets:
          AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}